// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    // Put your code here:
    //instruction[15] == 0, A instruction; else, C instruction
    Not(in=instruction[15], out=isAInst);
    Not(in=isAInst, out=isCInst);
    
    And(a=isCInst, b=instruction[5], out=loadALUout);
    Mux16(a=instruction, b=preALUOut, sel=loadALUout, out=inA);

    Or(a=isAInst, b=instruction[5], out=loadA);
    ARegister(in=inA, load=loadA, out=outA, out[0..14] = addressM);

    And(a=isCInst, b=instruction[12], out=loadM);
    Mux16(a=outA, b=inM, sel=loadM, out=outAM);

    And(a=isCInst, b=instruction[4], out=loadD);
    DRegister(in=preALUOut, load=loadD, out=outD);

    And(a = isCInst, b = instruction[6], out = no);
    And(a = isCInst, b = instruction[7], out = f);
    And(a = isCInst, b = instruction[8], out = ny);
    And(a = isCInst, b = instruction[9], out = zy);
    And(a = isCInst, b = instruction[10], out = nx);
    And(a = isCInst, b = instruction[11], out = zx);
    ALU(x=outD, y=outAM, zx=zx, nx=nx, zy=zy, ny=ny, f=f, no=no, out=preALUOut, out=outM, zr=zr, ng=ng);

    //write M
    And(a=isCInst, b=instruction[3], out=writeM);

    //PC
    And(a = isCInst, b = instruction[0], out = JumpIfGT);
    And(a = isCInst, b = instruction[1], out = JumpIfEQ);
    And(a = isCInst, b = instruction[2], out = JumpIfLT);

    And(a = ng, b = JumpIfLT, out = isLtJump);
    And(a = zr, b = JumpIfEQ, out = isEqJump);

    Not(in = ng, out = notNg);
    Not(in = zr, out = notZr);
    And(a = notNg, b = notZr, out = isPos);
    And(a = isPos, b = JumpIfGT, out = isGtJump);

    Or(a = isLtJump, b = isEqJump, out = isJump);
    Or(a = isJump, b = isGtJump, out = jump);  

    PC(in=outA, load=jump, inc=true, reset=reset, out[0..14]=pc);

}